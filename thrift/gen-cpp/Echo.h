/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef Echo_H
#define Echo_H

#include <TProcessor.h>
#include "echo_types.h"



class EchoIf {
 public:
  virtual ~EchoIf() {}
  virtual void echo(std::string& _return, const std::string& msg) = 0;
};

class EchoNull : virtual public EchoIf {
 public:
  virtual ~EchoNull() {}
  void echo(std::string& /* _return */, const std::string& /* msg */) {
    return;
  }
};

class Echo_echo_args {
 public:

  Echo_echo_args() : msg("") {
  }

  virtual ~Echo_echo_args() throw() {}

  std::string msg;

  struct __isset {
    __isset() : msg(false) {}
    bool msg;
  } __isset;

  bool operator == (const Echo_echo_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const Echo_echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Echo_echo_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Echo_echo_pargs {
 public:


  virtual ~Echo_echo_pargs() throw() {}

  const std::string* msg;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Echo_echo_result {
 public:

  Echo_echo_result() : success("") {
  }

  virtual ~Echo_echo_result() throw() {}

  std::string success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Echo_echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Echo_echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Echo_echo_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Echo_echo_presult {
 public:


  virtual ~Echo_echo_presult() throw() {}

  std::string* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class EchoClient : virtual public EchoIf {
 public:
  EchoClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  EchoClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echo(std::string& _return, const std::string& msg);
  void send_echo(const std::string& msg);
  void recv_echo(std::string& _return);
 protected:
  boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
};

class EchoProcessor : virtual public apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<EchoIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (EchoProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_echo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
 public:
  EchoProcessor(boost::shared_ptr<EchoIf> iface) :
    iface_(iface) {
    processMap_["echo"] = &EchoProcessor::process_echo;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~EchoProcessor() {}
};

class EchoMultiface : virtual public EchoIf {
 public:
  EchoMultiface(std::vector<boost::shared_ptr<EchoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~EchoMultiface() {}
 protected:
  std::vector<boost::shared_ptr<EchoIf> > ifaces_;
  EchoMultiface() {}
  void add(boost::shared_ptr<EchoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void echo(std::string& _return, const std::string& msg) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->echo(_return, msg);
        return;
      } else {
        ifaces_[i]->echo(_return, msg);
      }
    }
  }

};



#endif
